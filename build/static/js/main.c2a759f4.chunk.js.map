{"version":3,"sources":["components/VendingMachine.js","components/Instances.js","components/Scene.js","components/Navbar.js","components/HtmlContent.js","App.js","reportWebVitals.js","index.js"],"names":["VendingMachine","props","group","useRef","envMap","useCubeTexture","path","useState","reverse","setReverse","useGLTF","nodes","materials","useFrame","current","rotation","y","useEffect","ref","dispose","castShadow","material","geometry","Cola","position","preload","Instances","receiveShadow","Math","PI","attach","args","opacity","Scene","bumpMap","useTexture","matRef","useResource","MeshDistortMaterial","color","roughness","metalness","bumpScale","clearcoat","clearcoatRoughness","radius","distort","Navbar","className","href","HtmlContent","Html","fullscreen","softShadows","Sun","forwardRef","Effects","sunRef","cameraRef","PerspectiveCamera","makeDefault","fov","multisampling","luminanceThreshold","luminanceSmoothing","intensity","height","blendFunction","BlendFunction","ADD","focusDistance","focalLength","bokehScale","eskil","offset","darkness","NORMAL","adaptive","resolution","middleGrey","maxLuminance","averageLuminance","adaptationRate","sun","Screen","samples","density","decay","weight","exposure","clampMax","width","Resizer","AUTO_SIZE","kernelSize","KernelSize","SMALL","blur","App","gl","powerPreference","alpha","antialias","stencil","depth","shadowMap","colorManagement","onCreated","state","setClearColor","near","far","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","fallback","center","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2a759f4.chunk.js","sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, useState, useEffect } from 'react'\nimport { useGLTF, useCubeTexture  } from '@react-three/drei'\nimport {useFrame} from 'react-three-fiber'\n\nexport function VendingMachine(props) {\n  const group = useRef()\n  const envMap = useCubeTexture([\"px.png\", \"nx.png\", \"py.png\", \"ny.png\", \"pz.png\", \"nz.png\"], { path: \"/cubemap/\" })\n\n  const [reverse, setReverse] = useState(1);\n\n  const { nodes, materials } = useGLTF('/Cola.gltf')\n  useFrame(()=>  {\n    group.current.rotation.y += .001 * reverse;\n    if(group.current.rotation.y >=0.5) setReverse(-1);\n    else if (group.current.rotation.y <=0) setReverse(1);\n    }\n  );\n\n  useEffect(() => {\n    materials['Material.001'].envMap = envMap;\n  }, [])\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <mesh castShadow material={materials['Material.001']} geometry={nodes.Cola.geometry} position={[0,0,0]} />\n    </group>\n  )\n}\n\nuseGLTF.preload('/Cola.gltf')\n\nexport default VendingMachine\n","\r\nimport {Icosahedron, useGLTF} from \"@react-three/drei\";\r\nimport React, { useRef, useState} from \"react\";\r\nimport { useFrame } from \"react-three-fiber\";\r\n\r\nimport { VendingMachine } from './VendingMachine.js';\r\n\r\nfunction MainSphere({ material }) {\r\n    const main = useRef()\r\n    useFrame(() => {\r\n        // animate each sphere in the array\r\n        main.current.rotation.y -= 0.001;\r\n        main.current.rotation.x -= 0.001;\r\n      })\r\n    // main sphere rotates following the mouse position\r\n    return <Icosahedron args={[1, 4]} ref={main} material={material} position={[-0.7, 0, 0]} />\r\n  }\r\n\r\nexport function Instances() {\r\n    return (\r\n      <>       \r\n       <group>\r\n          <VendingMachine position={[-5,-0,-6]}/>\r\n          <mesh receiveShadow rotation={[-Math.PI / 2, 0,0]} position={[0,-3.12,0]}>\r\n              <planeBufferGeometry attach='geometry' args={[100,100]}/>\r\n              <shadowMaterial attach='material' opacity={.6}/>\r\n          </mesh>\r\n        </group>\r\n      </>\r\n    )\r\n  }\r\n\r\n  export default Instances;","\r\nimport { MeshDistortMaterial, useCubeTexture, useTexture} from \"@react-three/drei\";\r\nimport { Instances } from './Instances';\r\nimport { useResource } from \"react-three-fiber\";\r\n\r\n\r\nexport function Scene() {\r\n    const envMap = useCubeTexture([\"px.png\", \"nx.png\", \"py.png\", \"ny.png\", \"pz.png\", \"nz.png\"], { path: \"/cubemap/\" })\r\n    const bumpMap = useTexture(\"/rough_plaster_broken_bump_1k.jpg\")\r\n    // We use `useResource` to be able to delay rendering the spheres until the material is ready\r\n    const matRef = useResource()\r\n  \r\n  \r\n    return (\r\n      <>\r\n        <MeshDistortMaterial\r\n          ref={matRef}\r\n          envMap={envMap}\r\n          bumpMap={bumpMap}\r\n          color={\"red\"}\r\n          roughness={0.1}\r\n          metalness={1}\r\n          bumpScale={0.005}\r\n          clearcoat={1}\r\n          clearcoatRoughness={1}\r\n          radius={1}\r\n          distort={0.4}\r\n        />\r\n        <Instances material={matRef.current}/>\r\n      </>\r\n    )\r\n  \r\n  }\r\n\r\n  export default Scene;","\r\nimport React, { useRef } from \"react\";\r\n\r\nimport './Navbar.scss';\r\n\r\nexport const Navbar = () => {\r\n  return (\r\n    <div className=\"navbar\">\r\n        <ul>\r\n            <div className=\"nav-left\">\r\n                <li>\r\n                    <a href=\"\">About</a>\r\n                </li>   \r\n            </div>\r\n            <div className=\"nav-right\">\r\n            <li>\r\n                <a href=\"\">About</a>\r\n            </li>\r\n            <li>\r\n                <a href=\"\">About</a>\r\n            </li>\r\n            <li>\r\n                <a href=\"\">About</a>\r\n            </li>\r\n            </div>\r\n        </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar;\r\n","import { Html } from \"@react-three/drei\";\r\nimport {Navbar} from \"./Navbar\";\r\n\r\nimport \"./HtmlContent.scss\";\r\n\r\nexport const HtmlContent = () => {\r\n    return (\r\n    <Html fullscreen>\r\n      <Navbar />\r\n      <div className=\"front-section\">\r\n        <div className=\"title-div\">\r\n          <h1>Hello</h1>\r\n          <p>This is some text </p>\r\n          <p>This is some long long long long long long long long long long long long long long text </p>\r\n          <div className=\"button-div centered\">\r\n            <button className=\"primary-btn\">About me</button>\r\n            <button className=\"primary-btn\">My work</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"front-section\"></div>\r\n      <div className=\"front-section\"></div>\r\n      <div className=\"front-section\"></div>\r\n      <div className=\"front-section\"></div>\r\n    </Html>\r\n    )\r\n  }\r\n\r\n  export default HtmlContent;","\nimport React, { useRef, useState, forwardRef, Suspense, useEffect } from \"react\";\n\nimport * as THREE from 'three'\nimport './App.scss';\n\nimport { EffectComposer, DepthOfField, Bloom, Noise, Vignette,Glitch ,GodRays, ChromaticAberration, Scanline, ToneMapping, BrightnessContrast } from '@react-three/postprocessing'\nimport { BlendFunction, Resizer, KernelSize,GlitchMode  } from \"postprocessing\";\nimport { Canvas, useFrame, useThree, extend,useResource} from \"react-three-fiber\";\nimport { Scene } from './components/Scene'; \nimport { HtmlContent } from './components/HtmlContent';\n\n\nimport { Html, softShadows, Icosahedron, MeshWobbleMaterial, MeshDistortMaterial, useCubeTexture, OrbitControls, CameraShake,useTexture, Cylinder, useProgress, PerspectiveCamera } from \"@react-three/drei\";\n\nimport {useSpring, a} from 'react-spring/three';\n\nsoftShadows();\n\n\n\nconst Sun = forwardRef(function Sun(props, forwardRef) {\n  // useFrame(({ clock }) => {\n  //   forwardRef.current.position.x = Math.sin(clock.getElapsedTime()) * -8;\n  //   forwardRef.current.position.y = Math.cos(clock.getElapsedTime()) * -8;\n  // });\n\n  return (\n    <group >\n    <mesh ref={forwardRef} position={[25,9,-10]}>\n      <boxBufferGeometry args={[2, 1, 55]} />\n      <meshBasicMaterial color={\"#Fafafa\"} />\n      </mesh>    \n    {/* <mesh position={[-15,9,-10]}>\n    <boxBufferGeometry args={[2, 1, 35]} />\n    <meshBasicMaterial color={\"#Fafafa\"} />\n    </mesh> */}\n    </group>\n  );\n});\n\n\n\n\nfunction Effects() {\n  const sunRef = useResource();\n  const cameraRef = useRef();\n\n  // useFrame((state)=>{\n  //   // if(cameraRef && cameraRef.current.rotation.y <= 0.5) {\n  //   //   cameraRef.current.rotation.y += state.mouse.x/100;\n  //   //   cameraRef.current.rotation.x -= state.mouse.y/100;\n  //   // }\n  // })\n\n  return (\n    <>\n      <PerspectiveCamera makeDefault ref={cameraRef} position={[0,0,2.5]} fov={60}/>\n      <Sun ref={sunRef} />\n      {( sunRef.current &&\n        <EffectComposer multisampling={0}>\n          {/* <CameraShake {...config} /> */}\n          <Bloom luminanceThreshold={.5} luminanceSmoothing={0.9} intensity={4.0} height={300} opacity={1} blendFunction={BlendFunction.ADD} />\n          <DepthOfField focusDistance={0} focalLength={0.03} bokehScale={2} height={480}/>\n          <Vignette eskil={false} offset={0.1} darkness={0.7} />\n          <Noise opacity={0.025}/>\n          <ToneMapping\n            blendFunction={BlendFunction.NORMAL} // blend mode\n            adaptive={true} // toggle adaptive luminance map usage\n            resolution={256} // texture resolution of the luminance map\n            middleGrey={0.6} // middle grey factor\n            maxLuminance={16.0} // maximum luminance\n            averageLuminance={1.0} // average luminance\n            adaptationRate={1.0} // luminance adaptation rate\n          />\n          {/* <Scanline\n            blendFunction={BlendFunction.OVERLAY} // blend mode\n            density={.7}\n            opacity={0.1} // scanline density\n            /> */}\n            <GodRays\n              sun={sunRef.current}\n              blendFunction={BlendFunction.Screen}\n              samples={30}\n              density={0.9}\n              decay={0.85}\n              weight={0.6}\n              exposure={0.5}\n              clampMax={1}\n              width={Resizer.AUTO_SIZE}\n              height={Resizer.AUTO_SIZE}\n              kernelSize={KernelSize.SMALL}\n              blur={true}\n            />\n          {/* <BrightnessContrast\n            brightness={.15} // brightness. min: -1, max: 1\n            contrast={.3} // contrast: min -1, max: 1\n          /> */}\n          {/* <ChromaticAberration\n      blendFunction={BlendFunction.OVERLAY} // blend mode\n      offset={[-0.002, 0.002]} // color offset\n    /> */}\n        </EffectComposer>\n      )}\n    </>\n  );\n}\n\nfunction App() {\n  // const cameraRef = useRef();\n  // useFrame(() => {\n  //   // animate each sphere in the array\n  //   cameraRef.position.x -= 0.01;\n  // })\n  return (\n    <>\n    <Canvas \n    gl={{ powerPreference: \"high-performance\", alpha: false, antialias: false, stencil: false, depth: false }}\n    shadowMap colorManagement onCreated={state => state.gl.setClearColor(\"#070c0d\")} >\n      <ambientLight intensity={.5} color=\"#90fff1\"></ambientLight>\n      <fog color=\"#161616\" attach=\"fog\" near={8} far={30} />\n      <directionalLight\n        castShadow\n        position={[5,5,-3]}\n        intensity={1}\n        shadow-mapSize-width={1024}\n        shadow-mapSize-height={1024}\n        shadow-camera-far={50}\n        shadow-camera-left={-10}\n        shadow-camera-right={10}\n        shadow-camera-top={10}\n        shadow-camera-bottom={-10}\n        color={\"#fafafa\"}\n      />\n      <Suspense fallback={<Html center>Loading.</Html>}>\n        <Scene />\n        <HtmlContent />\n      </Suspense>\n      {/* <OrbitControls\n      /> */}\n\n      <Effects/>\n    </Canvas>\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}